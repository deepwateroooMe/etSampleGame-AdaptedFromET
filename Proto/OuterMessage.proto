syntax = "proto3";
package ET;

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
  int32 RpcId = 90;
}

message G2C_EnterMap // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  // 自己的unit id
  int64 UnitId = 1;
  // 所有的unit
  repeated UnitInfo Units = 2;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
  int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;

  int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
  int32 RpcId = 90;
  string Account = 1;
  string Password = 2;
}

message M2C_Reload // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
  int32 RpcId = 90;
  string  Account = 1;  // 帐号
  string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  string GateAddress = 1;
  int64 Key = 2;
  int64 GateId = 3;
}

//ResponseType R2C_Registe
message C2R_Registe // IRequest
{
  int32 RpcId = 90;
  string  Account = 1;  // 帐号
  string  Password = 2;  // 密码
}

message R2C_Registe // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
  int32 RpcId = 90;
  int64 Key = 1;  // 帐号
  int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  int64 PlayerId = 1;
  string LobbyAddress = 93;
}


//ResponseType L2C_LoginLobby
message C2L_LoginLobby // IRequest
{
  int32 RpcId = 90;
  int64 PlayerId = 1;  // 帐号
}

message L2C_LoginLobby // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  repeated int64 RoomHolderPlayerList = 5;
  repeated int64 RoomIdList = 1;
  repeated string RoomNameList = 2;
  repeated int32 RoomPlayerNum = 3;
}

message G2C_TestHotfixMessage // IMessage
{
  string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  int32 N = 1;
}


///////////////////////////////// 房间相关  START ///////////////////////////////////

//ResponseType L2C_CreateNewRoomLobby
message C2L_CreateNewRoomLobby // IRequest
{
  int32 RpcId = 90;
  int64 PlayerId = 1;  // 帐号
}

message L2C_CreateNewRoomLobby // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  int32 RoomId = 1;
  int32 mode = 2;
  int32 camp = 3; //阵营，房间位置
}

//ResponseType L2C_JoinRoomLobby
message C2L_JoinRoomLobby // IRequest
{
  int32 RpcId = 90;
  int64 PlayerId = 1;  // 帐号
  int64 RoomId = 2; //加入的房间Id
}

message L2C_JoinRoomLobby // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  int64 RoomId = 1; //加入的房间Id
  int32 camp = 2; //阵营，房间位置
  int64 RoomHolderId = 3;
  string RoomName = 4;
  repeated PlayerInfoRoom playerInfoRoom = 5;
}

message PlayerInfoRoom
{
  string Account = 1;
  int64 UnitId = 2;
  int64 SessionId = 3;
  int64 RoomId = 4;
  int32 camp = 5;
  int64 playerid = 6;
}

message L2C_PlayerTriggerRoom // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  PlayerInfoRoom playerInfoRoom = 1;
  bool JoinOrLeave = 2;
}

//ResponseType L2C_LeaveRoomLobby
message C2L_LeaveRoomLobby // IRequest
{
  int32 RpcId = 90;
  int64 PlayerId = 1;  // 帐号
}

message L2C_LeaveRoomLobby // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  int32 camp = 1; //阵营，房间位置
  int64 newRoomHolder = 2; //更换房主的时候选的新房主
  int64 RoomId = 4; // 离开的RoomId
  int64 PlayerId = 5;
  bool isDestory = 3;
}

message PlayerBattleInfo
{
  int64 PlayerId = 1;
  int32 HeroConfig = 2;
  repeated int32 SpriteConfigs = 3;
}

//ResponseType L2C_StartGameLobby
message C2L_StartGameLobby // IRequest
{
  int32 RpcId = 90;
  int64 PlayerId = 1;  // 帐号
  repeated PlayerBattleInfo PlayerBattleInfos = 2;
}

message L2C_StartGameLobby // IResponse
{
  int32 RpcId = 90;
  int32 Error = 91;
  string Message = 92;
  repeated int64 list = 1;
}

message M2C_EndBattleSettle // IActorMessage
{
  repeated PlayerBattlePoint settleAccount = 1;
}

message M2C_KillEvent // IActorMessage
{
  PlayerBattlePoint  killer = 1;
  PlayerBattlePoint  deadPlayer = 2;
}

message PlayerBattlePoint
{
  int64 PlayerId = 1;
  int32 Point = 2;
  int32 SingleMatchCount = 3;
  string Account = 4;
  int64 UnitId = 5;
}


///////////////////////////////// 房间相关  END ///////////////////////////////////

//////////////////////////////// 战斗相关 START ///////////////////////////////////////

message L2C_PrepareToEnterBattle  // IMessage
{
}

message C2L_PreparedToEnterBattle // IMessage
{
  int64 PlayerId = 1;
}

message L2C_AllowToEnterMap // IMessage
{

}

message UnitInfo
{
  int64 UnitId = 1;
  int32 ConfigId = 2;
  // 所属的玩家id
  int64 BelongToPlayerId = 99;
  float X = 3;
  float Y = 4;
  float Z = 5;
  int32 RoleCamp = 6;
}

message M2C_CreateUnits // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  int64 PlayerId = 94;
  int64 RoomId = 95;
  repeated UnitInfo Units = 2;
}

message M2C_UnitDestoryed // IActorMessage
{
  int64 ActorId = 93;
  //被破坏的UnitId
  int64 DestoryedUnitId = 94;
}

message C2M_PathfindingResult // IActorLocationMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  float X = 1;
  float Y = 2;
  float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
}

message M2C_PathfindingResult // IActorMessage
{
  int64 ActorId = 93;

  int64 Id = 1;

  float X = 2;
  float Y = 3;
  float Z = 4;
  float Speed = 6;

  repeated float Xs = 7;
  repeated float Ys = 8;
  repeated float Zs = 9;
}

message M2C_Stop // IActorMessage
{
  int32 Error = 1;

  int64 Id = 2;
  float X = 3;
  float Y = 4;
  float Z = 5;

  float A = 6;
  float B = 7;
  float C = 8;
  float W = 9;
}

message M2C_ReceiveDamage // IActorMessage
{
  int32 Error = 1;
  int64 UnitId = 2;

  float FinalValue = 4;
}

message M2C_ChangeProperty // IActorMessage
{
  int32 Error = 1;
  int64 UnitId = 2;

  int32 NumicType = 3;
  float FinalValue = 4;
}

message C2M_CastHeroSkill // IActorLocationMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
}

message M2C_CastHeroSkill // IActorMessage
{
  int64 UnitId = 1;
}

message M2C_RecoverHP // IActorMessage
{
  int64 SpriteUnitId = 1;
  float  RecoverHPValue = 2;
}

//请求攻击
message C2M_CommonAttack // IActorLocationMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 TargetUnitId = 1;
}

//请求攻击
message M2C_CancelCommonAttack // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 TargetUnitId = 1;
}


//服务器返回攻击指令，开始播放动画
message M2C_CommonAttack // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 AttackCasterId = 4;//攻击发起者Id
  int64 TargetUnitId = 3;//攻击目标Id
  bool CanAttack = 2; //是否可以发起攻击
}


message M2C_BuffInfo // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 UnitId = 1; //要发送到的目标UnitId
  int64 SkillId = 96; //目标技能Id

  string BBKey = 2; //黑板键，此键对应值将会被设置为Buff层数

  int64 TheUnitBelongToId = 95; //Buff归属的UnitId
  int64 TheUnitFromId = 91; //Buff来自的UnitId
  int32 BuffLayers = 3; //Buff层数
  float BuffMaxLimitTime = 4; //Buff最大持续到的时间点
}

message C2M_UserInputSkillCmd // IActorLocationMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  string VK = 64;
}

//同步行为树bool黑板变量
message M2C_SyncNPBehaveBoolData // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 UnitId = 94;
  //黑板键
  string BBKey = 2;
  bool Value = 5;
}
//同步CD信息
message M2C_SyncCDData // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 UnitId = 94;
  //CD名称
  string CDName = 2;
  //CD总时长
  int64 CDLength = 3;
  //剩余CD时长
  int64 RemainCDLength = 5;
}

message C2M_CreateSpiling // IActorLocationMessage
{
  float X = 2;
  float Y = 3;
  float Z = 4;
  //所归属的父实体id
  int32 RpcId = 90;
  int64 ActorId = 93;
}


message M2C_CreateSpilings // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;
  int64 RoomId = 95;
  UnitInfo Unit = 2;
}

message M2C_SyncUnitAttribute // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 UnitId = 94;

  int32 NumericType = 95;
  float FinalValue = 3;
}

message M2C_ChangeUnitAttribute // IActorMessage
{
  int32 RpcId = 90;
  int64 ActorId = 93;

  int64 UnitId = 94;

  int32 NumericType = 95;

  float ChangeValue = 2;
}

////////////////////////////////////////////// 战斗相关 END ///////////////////////////////////////////////////////////////